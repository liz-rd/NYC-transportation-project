# -*- coding: utf-8 -*-
"""TDSP project code- Liz Ragsdale.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1itAvPZOdiF-o4364yqyh_MWjaqxrU2i0
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import folium

data = pd.read_csv("/content/drive/My Drive/Colab Notebooks/Motor_Vehicle_Collisions.csv")
# data sourced from: https://data.cityofnewyork.us/Public-Safety/Motor-Vehicle-Collisions-Crashes/h9gi-nx95/about_data
# visuals from data up to 1/15/25

list(data.columns)
data

"""Crash Date: format month/day/year

Crash time: formatted by 24 hour clock

Borough: 5 boroughs + missing data

Zip code, latitude, longitude: recorded location, has NA's

location: lat + long, formated (lat, long)

Collision ID: identifying ID


"""

import missingno as msno
#creates a matrix showing where missing data occurs
  #missing data is representated as white space on the matrix
msno.matrix(data)

# Convert 'CRASH DATE' to datetime format
data['CRASH DATE'] = pd.to_datetime(data['CRASH DATE'])

# Group by month and year to get the number of crashes per month
monthly_crashes = data.groupby(data['CRASH DATE'].dt.to_period("M")).size()

# Plotting the trend over time
plt.figure(figsize=(15, 7))
monthly_crashes.plot()
plt.title('Number of Crashes per Month', fontsize=16)
plt.xlabel('Date', fontsize=14)
plt.ylabel('Number of Crashes', fontsize=14)
plt.tight_layout()
plt.show()

geo_data = data.dropna(subset=['LATITUDE', 'LONGITUDE'])

geo_data['CRASH DATE'] = pd.to_datetime(geo_data['CRASH DATE'], format='%m/%d/%Y')

pre_data = geo_data.loc[(geo_data['CRASH DATE'] <= '2020-03-01')]
post_data = geo_data.loc[(geo_data['CRASH DATE'] >= '2020-03-02')]

from folium.plugins import HeatMap
import branca

# Define the legend's HTML using Branca
legend_html = '''
{% macro html(this, kwargs) %}
<div style="position: fixed;
     top: 50px; left: 50px; width: 225px; height: 100px;
     border:2px solid grey; z-index:9999; font-size:14px;
     background-color:white; opacity: 0.85;">
     &nbsp; <b>Legend</b> <br>
     &nbsp; Times Square &nbsp; <i class="fa fa-circle" style="color:purple"></i><br>
     &nbsp; Central Park &nbsp; <i class="fa fa-circle" style="color:green"></i><br>
     &nbsp; Wall Street/Brooklyn Bridge &nbsp; <i class="fa fa-circle" style="color:blue"></i><br>
</div>
{% endmacro %}
'''

legend = branca.element.MacroElement()
legend._template = branca.element.Template(legend_html)

# Create a base map
m = folium.Map(location=[40.730610, -73.935242], zoom_start=10)  # Centered around NYC

# pre covid heatmap
heat_data = [[row['LATITUDE'], row['LONGITUDE']] for index, row in pre_data.iterrows()]
HeatMap(heat_data, radius=12, max_zoom=13).add_to(m)

#markers
  #Times Square
folium.Marker(
    location=[40.758896, -73.985130],
    popup="Times Square",
    icon=folium.Icon(color="purple"),
).add_to(m)

  #Central Park
folium.Marker(
    location=[40.782864, -73.965355],
    popup="Central Park",
    icon=folium.Icon(color="green"),
).add_to(m)

  #Wall Street
folium.Marker(
    location=[40.706020, -74.008827],
    popup="Wall Street + end of Brooklyn Bridge",
    icon=folium.Icon(color="blue"),
).add_to(m)

#  #Queensboro Bridge
#folium.Marker(
 #   location=[40.756944, -73.954722],
  #  popup="Queensboro Bridge",
   # icon=folium.Icon(color="lightgray"),
#).add_to(m)

# Add the legend to the map
m.get_root().add_child(legend)

m.save("Pre-2020 Heatmap.html")

# post march 2020 heatmap

m = folium.Map(location=[40.730610, -73.935242], zoom_start=10)  # Centered around NYC

heat_data = [[row['LATITUDE'], row['LONGITUDE']] for index, row in post_data.iterrows()]
HeatMap(heat_data, radius=12, max_zoom=13).add_to(m)

#markers
  #Times Square
folium.Marker(
    location=[40.758896, -73.985130],
    popup="Times Square",
    icon=folium.Icon(color="purple"),
).add_to(m)

  #Central Park
folium.Marker(
    location=[40.782864, -73.965355],
    popup="Central Park",
    icon=folium.Icon(color="green"),
).add_to(m)

  #Wall Street
folium.Marker(
    location=[40.706020, -74.008827],
    popup="Wall Street + end of Brooklyn Bridge",
    icon=folium.Icon(color="blue"),
).add_to(m)

# Add the legend to the map
m.get_root().add_child(legend)

m.save("Post-2020 Heatmap.html")

"""Editing time series to better filter seasonalty"""

import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.tsa.seasonal import seasonal_decompose

data['CRASH DATE'] = pd.to_datetime(data['CRASH DATE'], format='%m/%d/%Y')

# Count the number of crashes per day, group by CRASH DATE
daily_crashes = data.groupby('CRASH DATE').size()

# Set plot style
sns.set(style="darkgrid")

# Plot the daily crashes time series
plt.figure(figsize=(15, 6))
plt.plot(daily_crashes, label='Daily crashes')
plt.title('Daily Motor Vehicle Collisions in NYC')
plt.xlabel('Crash Dates')
plt.ylabel('Number of Crashes')
plt.legend()
plt.show()

# Decompose the time series
decomposition = seasonal_decompose(daily_crashes, model='additive', period=365)

# Plot the decomposed components
fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(15, 12))
decomposition.trend.plot(ax=ax1)
ax1.set_title('Trend')
decomposition.seasonal.plot(ax=ax2)
ax2.set_title('Seasonality')
decomposition.resid.plot(ax=ax3)
ax3.set_title('Residuals')
plt.tight_layout()
plt.show()

#line plot showing crashes, injuries and deaths

# Count the number of crashes per day, group by CRASH DATE
daily_crashes = data.groupby('CRASH DATE').size()

#counting number of crashes with injuries
#'NUMBER OF PERSONS INJURED'
injury = data.loc[data['NUMBER OF PERSONS INJURED'] != 0]
daily_injuries = injury.groupby('CRASH DATE').size()

#counting number of crashes with deaths
#'NUMBER OF PERSONS KILLED'
deaths = data.loc[data['NUMBER OF PERSONS KILLED'] != 0]
daily_deaths = deaths.groupby('CRASH DATE').size()

#plot
import seaborn as sns
sns.set_theme(style="whitegrid")

daily_df = pd.DataFrame(daily_crashes)
death_df = pd.DataFrame(daily_deaths)
inj_df = pd.DataFrame(daily_injuries)

# Plot the responses for different events and regions

plt.figure(figsize=(15, 6))

sns.lineplot(x="CRASH DATE", y=0, label='Crashs with Casualties',
             data=death_df)

sns.lineplot(x="CRASH DATE", y=0, label='Crash with Injuries',
             data=inj_df)

sns.lineplot(x="CRASH DATE", y=0, label='All Accidents',
             data=daily_df)
plt.title('Fig. 3: Daily Motor Vehicle Collisions in NYC', fontsize=15)
plt.xlabel('Crash Dates')
plt.ylabel('Number of Crashes')
plt.axvline(x=18315, color='red', linestyle='--')
plt.legend(loc='upper right')
plt.show()

"""stacked bar chart for sevarity (one for deaths and one for injuries)"""

#Injury df and plot
import numpy as np

#avg total injuries
prey1 = np.array(pre_data['NUMBER OF PEDESTRIANS INJURED'].sum()) / 92
prey2 = np.array(pre_data['NUMBER OF CYCLIST INJURED'].sum()) / 92
prey3 = np.array(pre_data['NUMBER OF MOTORIST INJURED'].sum()) / 92

posty1 = np.array(post_data['NUMBER OF PEDESTRIANS INJURED'].sum()) / 58
posty2 = np.array(post_data['NUMBER OF CYCLIST INJURED'].sum()) / 58
posty3 = np.array(post_data['NUMBER OF MOTORIST INJURED'].sum()) / 58

ped_inj = np.array([prey1, posty1])
cyc_inj = np.array([prey2, posty2])
mot_inj = np.array([prey2, posty2])

x = ["Pre 2020", "Post 2020"]

# plot bars in stack manner
plt.bar(x, ped_inj, color='firebrick')
plt.bar(x, cyc_inj, bottom=ped_inj, color='darkorange')
plt.bar(x, mot_inj, bottom=ped_inj+cyc_inj, color='gold')
#plt.xlabel("Teams")
plt.ylabel("Number Injured")
plt.legend(["Pedestrians", "Cyclists", "Motorists"])
plt.title("Fig 4: Average Monthly Injuries Before and After March 2020", fontsize=15)
plt.show()

#deaths plot

#avg total injuries
prey1 = np.array(pre_data['NUMBER OF PEDESTRIANS KILLED'].sum()) / 92
prey2 = np.array(pre_data['NUMBER OF CYCLIST KILLED'].sum()) / 92
prey3 = np.array(pre_data['NUMBER OF MOTORIST KILLED'].sum()) / 92

posty1 = np.array(post_data['NUMBER OF PEDESTRIANS KILLED'].sum()) / 58
posty2 = np.array(post_data['NUMBER OF CYCLIST KILLED'].sum()) / 58
posty3 = np.array(post_data['NUMBER OF MOTORIST KILLED'].sum()) / 58

ped_d = np.array([prey1, posty1])
cyc_d = np.array([prey2, posty2])
mot_d = np.array([prey2, posty2])

x = ["Pre 2020", "Post 2020"]

# plot bars in stack manner
plt.bar(x, ped_d, color='firebrick')
plt.bar(x, cyc_d, bottom=ped_d, color='darkorange')
plt.bar(x, mot_d, bottom=ped_d+cyc_d, color='gold')
#plt.xlabel("Teams")
plt.ylabel("Number of Deaths")
plt.legend(["Pedestrians", "Cyclists", "Motorists"])
plt.title("Fig 5: Average Monthly Deaths Before and After March 2020", fontsize=15)
plt.show()

#T-test for differing severities

post_data['CRASH DATE'] = pd.to_datetime(post_data['CRASH DATE'], format='%m/%d/%Y')
pre_data['CRASH DATE'] = pd.to_datetime(pre_data['CRASH DATE'], format='%m/%d/%Y')

#getting summed values by month
#INJURIES
    #pedestrains
ped_inj_mon2 = post_data.groupby(post_data['CRASH DATE'].dt.to_period('M'))['NUMBER OF PEDESTRIANS INJURED'].sum()
ped_inj_mon1 = pre_data.groupby(pre_data['CRASH DATE'].dt.to_period('M'))['NUMBER OF PEDESTRIANS INJURED'].sum()
    #cyclists
cyc_inj_mon1 = pre_data.groupby(pre_data['CRASH DATE'].dt.to_period('M'))['NUMBER OF CYCLIST INJURED'].sum()
cyc_inj_mon2 = post_data.groupby(post_data['CRASH DATE'].dt.to_period('M'))['NUMBER OF CYCLIST INJURED'].sum()
    #motorists
mot_inj_mon1 = pre_data.groupby(pre_data['CRASH DATE'].dt.to_period('M'))['NUMBER OF MOTORIST INJURED'].sum()
mot_inj_mon2 = post_data.groupby(post_data['CRASH DATE'].dt.to_period('M'))['NUMBER OF MOTORIST INJURED'].sum()

#t-test for each for significant different means
from scipy import stats

stats.ttest_ind(ped_inj_mon1, ped_inj_mon2, equal_var = False)  #p < 0.0001 sig diff for ped injuries

stats.ttest_ind(cyc_inj_mon1, cyc_inj_mon2, equal_var = False) #with p=0.009 there is sig diff for cyclist injuries

stats.ttest_ind(mot_inj_mon1, mot_inj_mon2, equal_var = False) #p= 0.001, sig diff for motorist injuries

#DEATHS
    #pedestrains
ped_dea_mon2 = post_data.groupby(post_data['CRASH DATE'].dt.to_period('M'))['NUMBER OF PEDESTRIANS KILLED'].sum()
ped_dea_mon1 = pre_data.groupby(pre_data['CRASH DATE'].dt.to_period('M'))['NUMBER OF PEDESTRIANS KILLED'].sum()
    #cyclists
cyc_dea_mon1 = pre_data.groupby(pre_data['CRASH DATE'].dt.to_period('M'))['NUMBER OF CYCLIST KILLED'].sum()
cyc_dea_mon2 = post_data.groupby(post_data['CRASH DATE'].dt.to_period('M'))['NUMBER OF CYCLIST KILLED'].sum()
    #motorists
mot_dea_mon1 = pre_data.groupby(pre_data['CRASH DATE'].dt.to_period('M'))['NUMBER OF MOTORIST KILLED'].sum()
mot_dea_mon2 = post_data.groupby(post_data['CRASH DATE'].dt.to_period('M'))['NUMBER OF MOTORIST KILLED'].sum()

#Welch's t-test

stats.ttest_ind(ped_dea_mon1, ped_dea_mon2, equal_var = False) #p = 0.03 sig diff for ped deaths

stats.ttest_ind(cyc_dea_mon1, cyc_dea_mon2, equal_var = False) #p = 0.02 sig diff for cyc deaths

stats.ttest_ind(mot_dea_mon1, mot_dea_mon2, equal_var = False) #p = 0.003 sig dif for mot deaths